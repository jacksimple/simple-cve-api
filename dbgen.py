"""
This script generates the SQLite database from the cvelist repo.
At a high level it traverses the folder structure looking for JSON files,
cleans them a bit, and inserts them into SQLite.
It rebuilds the database from scratch each time.
"""

import json
import logging
import os
import sqlite3

FORMAT = "%(asctime)s-%(levelname)s-%(message)s"
logging.basicConfig(format=FORMAT)
logger = logging.getLogger()
logger.setLevel(logging.INFO)


def get_description_eng(cve):
    """
    Attempts to extract an english description from the provided cve.
    If none is found, returns a blank string.

    Parameters
    ----------
    cve : dict
        The dictionary generated from the CVE json.

    Returns
    -------
    str
        This will be either the english description, or a blank string.
    """
    description_eng = ""
    if "description" in cve and "description_data" in cve["description"]:
        for description_data in cve["description"]["description_data"]:
            if "lang" in description_data and description_data["lang"] == "eng":
                if "value" in description_data:
                    description_eng = description_data["value"].lower()
                    break
    return description_eng


def get_cve_id(cve):
    """
    Attempts to extract the cve id from the provided cve.
    If none is found, returns a blank string.

    Parameters
    ----------
    cve : dict
        The dictionary generated from the CVE json.

    Returns
    -------
    str
        This will be either the cve id, or a blank string.
    """
    cve_id = ""
    if "CVE_data_meta" in cve and "ID" in cve["CVE_data_meta"]:
        cve_id = cve["CVE_data_meta"]["ID"].lower()
    return cve_id


def get_generic_field_dict(cve, field):
    """
    Attempts to extract the dictionary associated to the field
    from the provided cve.
    If none is found, returns an empty dictionary.

    Parameters
    ----------
    cve : dict
        The dictionary generated from the CVE json.

    Returns
    -------
    dict
        This will be either the field's dictionary value, or an empty dictionary.
    """
    return cve[field] if field in cve else {}


def get_generic_field_str(cve, field):
    """
    Attempts to extract the string associated to the field
    from the provided cve.
    If none is found, returns a blank string.

    Parameters
    ----------
    cve : dict
        The dictionary generated from the CVE json.

    Returns
    -------
    str
        This will be either the field's string value, or a blank string.
    """
    return cve[field] if field in cve else ""


def generate_db(cve_root_folder="./cvelist"):
    """
    Attempts to extract the dictionary associated to the field
    from the provided cve.
    If none is found, returns an empty dictionary.

    Parameters
    ----------
    cve_root_folder : str
        The root folder of cve list that will be traversed.
    """
    conn = sqlite3.connect("cves.db")
    cur = conn.cursor()
    cur.execute("DROP TABLE IF EXISTS cves")
    cur.execute(
        """
    CREATE TABLE cves (
        cve_id TEXT,
        description_eng TEXT,
        affects JSON,
        cve_data_meta JSON,
        description JSON,
        problemtype JSON,
        cve_references JSON,
        data_format TEXT,
        data_type TEXT,
        data_version TEXT
    )
    """
    )
    logging.info("Starting file traversal")
    for root, dirs, files in os.walk(cve_root_folder):
        path = root.split(os.sep)
        logging.info("Current path: {0}".format("/".join(path)))
        for f in files:
            if f.endswith(".json"):
                full_path = "{0}/{1}".format("/".join(path), f)
                with open(full_path) as json_file:
                    cve = json.load(json_file)
                    # cve_id and description_eng require extra parsinge effort so they get their own functions
                    cve_id = get_cve_id(cve)
                    description_eng = get_description_eng(cve)

                    # cvelist placeholder cves don't contain all these fields
                    # instead of ommiting them, I chose to include them with default empty/blank values
                    affects = get_generic_field_dict(cve, "affects")
                    cve_data_meta = get_generic_field_dict(cve, "CVE_data_meta")
                    description = get_generic_field_dict(cve, "description")
                    problemtype = get_generic_field_dict(cve, "problemtype")
                    references = get_generic_field_dict(cve, "references")

                    data_format = get_generic_field_str(cve, "data_format")
                    data_type = get_generic_field_str(cve, "data_type")
                    data_version = get_generic_field_str(cve, "data_version")

                    cur.execute(
                        "INSERT INTO cves VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",
                        [
                            cve_id,
                            description_eng,
                            json.dumps(affects),
                            json.dumps(cve_data_meta),
                            json.dumps(description),
                            json.dumps(problemtype),
                            json.dumps(references),
                            data_format,
                            data_type,
                            data_version,
                        ],
                    )
    conn.commit()
    conn.close()
    logging.info("Generating DB complete")


if __name__ == "__main__":
    generate_db()
